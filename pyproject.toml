# build-system

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
[project]
authors = [{name = "Derek Wan", email = "d.wan@icloud.com"}]
dependencies = []
dynamic = ["version"]
name = "dycw-nitpick"
readme = "README.md"
requires-python = ">= 3.11"

[project.optional-dependencies]
dev = ["dycw-utilities[test]", "hatch", "pre-commit"]

# coverage
[tool.coverage]

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.report]
exclude_also = ["@overload", "if TYPE_CHECKING:"]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

# hatch
[tool.hatch]

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/dycw_nitpick"]

[tool.hatch.version]
path = "src/dycw_nitpick/__init__.py"

# nitpick
[tool.nitpick]
cache = "never"
style = ["styles/3.11.toml", "styles/common.toml"]

# pyright
[tool.pyright]
executionEnvironments = [{root = "src"}]
include = ["src"]
pythonVersion = "3.11"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = false
reportUnusedCallResult = "error"
typeCheckingMode = "strict"

# pytest
[tool.pytest]

[tool.pytest.ini_options]
addopts = ["-ra", "-vv", "--color=auto", "--strict-markers"]
filterwarnings = ["error"]
minversion = "8.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
[tool.ruff]
src = ["src"]
target-version = "py311"
unsafe-fixes = true

[tool.ruff.lint]
ignore = [
  "ANN101",  # missing-type-self
  "ANN102",  # missing-type-cls
  "ANN401",  # dynamically-typed-expression
  "D",  # pydocstyle
  # formatter
  "W191",  # tab-indentation
  "E111",  # indentation-with-invalid-multiple
  "E114",  # indentation-with-invalid-multiple-comment
  "E117",  # over-indented
  "D206",  # indent-with-spaces
  "D300",  # triple-single-quotes
  "Q000",  # bad-quotes-inline-string
  "Q001",  # bad-quotes-multiline-string
  "Q002",  # bad-quotes-docstring
  "Q003",  # avoidable-escaped-quote
  "COM812",  # missing-trailing-comma
  "COM819",  # prohibited-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
  "ISC002",  # multi-line-implicit-string-concatenation
]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001",  # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003",  # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004",  # refactor, magic-value-comparison
  "S101",  # flake8-bandit, assert-used
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
