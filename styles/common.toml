#

# pre-commit
[[".pre-commit-config.yaml".repos]]  # black
repo = "https://github.com/psf/black"

[[".pre-commit-config.yaml".repos.hooks]]
id = "black"

[[".pre-commit-config.yaml".repos.hooks]]
id = "black-jupyter"

[[".pre-commit-config.yaml".repos]]  # dycw
repo = "https://github.com/dycw/pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "run-hatch-version"

[[".pre-commit-config.yaml".repos]]  # nitpick
repo = "https://github.com/andreoliwa/nitpick"

[[".pre-commit-config.yaml".repos.hooks]]
id = "nitpick-check"

[[".pre-commit-config.yaml".repos]]  # pre-commit
repo = "https://github.com/pre-commit/pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-executables-have-shebangs"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-merge-conflict"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-shebang-scripts-are-executable"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-symlinks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "destroyed-symlinks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "detect-private-key"

[[".pre-commit-config.yaml".repos.hooks]]
id = "end-of-file-fixer"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--fix=lf"]
id = "mixed-line-ending"

[[".pre-commit-config.yaml".repos.hooks]]
id = "no-commit-to-branch"

[[".pre-commit-config.yaml".repos.hooks]]
id = "trailing-whitespace"

[[".pre-commit-config.yaml".repos]]  # prettier
repo = "https://github.com/pre-commit/mirrors-prettier"

[[".pre-commit-config.yaml".repos.hooks]]
id = "prettier"

[[".pre-commit-config.yaml".repos]]  # pretty-format-toml
repo = "https://github.com/macisamuele/language-formatters-pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--autofix", "--trailing-commas"]
id = "pretty-format-toml"

[[".pre-commit-config.yaml".repos]]  # local: pyright
repo = "local"

[[".pre-commit-config.yaml".repos.hooks]]
entry = "pyright"
id = "pyright"
language = "system"
name = "pyright"
types = ["python"]

[[".pre-commit-config.yaml".repos]]  # ruff
repo = "https://github.com/charliermarsh/ruff-pre-commit"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--fix"]
id = "ruff"

[[".pre-commit-config.yaml".repos]]  # shellcheck
repo = "https://github.com/shellcheck-py/shellcheck-py"

[[".pre-commit-config.yaml".repos.hooks]]
id = "shellcheck"

# nitpick
[nitpick.files.absent]
".bump2version.cfg" = ""
".flake8" = ""
".isort.cfg" = ""
"MANIFEST.in" = ""
"package.json" = ""
"setup.cfg" = ""
"setup.py" = ""

[nitpick.files.present]
"pyproject.toml" = ""

# build-system
["pyproject.toml".build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
["pyproject.toml".project]
dynamic = ["version"]
readme = "README.md"

# black
["pyproject.toml".tool.black]
line-length = 80
skip-magic-trailing-comma = true

# coverage
["pyproject.toml".tool.coverage]

["pyproject.toml".tool.coverage.html]
directory = ".coverage/html"

["pyproject.toml".tool.coverage.report]
exclude_lines = ["# pragma: no cover", "@overload"]
fail_under = 100.0
skip_covered = true
skip_empty = true

["pyproject.toml".tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

# hatch
["pyproject.toml".tool.hatch]

["pyproject.toml".tool.hatch.build]
sources = ["src"]

# pyright
["pyproject.toml".tool.pyright]
exclude = ["**/__pycache__", ".direnv", ".git"]
executionEnvironments = [{root = "src"}]
include = ["src"]
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = false
reportUnusedCallResult = "error"
typeCheckingMode = "strict"

# pytest
["pyproject.toml".tool.pytest]

["pyproject.toml".tool.pytest.ini_options]
addopts = [
  "-rsxX",
  "--color=auto",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--strict-markers",
  "--tb=native",
]
filterwarnings = ["error"]
minversion = "7.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
["pyproject.toml".tool.ruff]
ignore = [
  "ANN101",  # flake8-annotations, missing-type-self
  "ANN102",  # flake8-annotations, missing-type-cls
  "ANN401",  # flake8-annotations, dynamically-typed-expression
  "B008",  # flake8-bugbear, function-call-argument-default
  "COM812",  # flake8-commas, trailing-comma-missing
  "PGH003",  # pygrep-hooks, blanket-type-ignore
  "PLR0913",  # refactor, too-many-arguments
  "PT012",  # flake8-pytest-style, raises-with-multiple-statements
  "PT013",  # flake8-pytest-style, incorrect-pytest-import
]
select = [
  "F",  # pyflakes
  "E",  # pycodestyle
  "W",  # pycodestyle
  "I",  # isort
  "N",  # pep8-naming
  "UP",  # pyupgrade
  "YTT",  # flake8-2020
  "ANN",  # flake8-annotations
  "ASYNC",  # flake8-async
  "S",  # flake8-bandit
  "BLE",  # flake8-blind-excpt
  "FBT",  # flake8-boolean-trap
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "C4",  # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "EM",  # flake8-errmsg
  "EXE",  # flake8-executable
  "FA",  # flake8-future-annotations
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "G",  # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",  # flake8-pytest-style
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT",  # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "TD",  # flake8-todos
  "FIX",  # flake8-fixme
  "ERA",  # eradicate
  "PGH",  # pygrep-hooks
  "PL",  # pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # numpy-specific-rules
  "PERF",  # perflint
  "FURB",  # refurb
  "LOG",  # flake8-logging
  "RUF",  # ruff
]
src = ["src", "tests"]

["pyproject.toml".tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

["pyproject.toml".tool.ruff.per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001",  # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003",  # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004",  # refactor, magic-value-comparison
  "S101",  # flake8-bandit, assert-used
]
